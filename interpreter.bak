;;
;; FILE:     interpreter.rkt
;; AUTHOR:   Tanner Raine
;; DATE:     2024/04/23
;; COMMENT:  Uses accumulator passing style to demonstrate
;;           efficient function calls.
;;
;; MODIFIED: 2024/04/23 by Tanner Raine
;; CHANGE:   Fixed run-huey for base case
;;

#lang racket

(require "syntax-procs.rkt")
(require "datatypes.rkt")
(provide preprocess eval-exp)

;; --------------------------------------------------------------------------
;; This function preprocesses programs written in the full Huey language
;; to core Huey features.
;; --------------------------------------------------------------------------

(define preprocess
  (lambda (exp)
    (cond ((rgb? exp) exp)
          ((unary-exp? exp)
              (preprocess-unary (unary->op exp)
                                (preprocess (unary->arg exp))))
          
          ((2color-exp? exp)
              (preprocess-2color (2color->op exp)
                                 (preprocess (2color->left exp))
                                 (preprocess (2color->right exp))))
          
          ((1color-exp? exp)
              (preprocess-1color (1color->op exp)
                                 (preprocess (1color->left exp))
                                 (1color->right exp)))

          [(color/in? exp)
              (preprocess-color/in (color/in-var exp)
                                   (preprocess (color/in-color1 exp))
                                   (preprocess (color/in-color2 exp)))]

          [(do? exp)
           (if (> (length exp) 3)
               (preprocess-do-assign (map preprocess-assignment (do-assgn exp))
                                     (preprocess (do-color exp)));;assignment statement
               (preprocess-do (preprocess (do-color exp))))] ;;no assignment statement
           

          ((varref? exp) exp)
           
          (else
             (error 'preprocess "invalid argument ~a" exp)))))

; these helper functions receive *preprocessed* args

(define preprocess-unary
  (lambda (op color)
    (cond ((unary-op-core? op)
             (unary-exp op color))
          ((eq? op 'darker)
             (1color-exp '* color 0.5))
          (else
             (error 'preprocess-unary "illegal args ~a ~a" op color)))))

(define preprocess-2color
  (lambda (op left right)
    (cond ((2color-op-core? op)
             (2color-exp op left right))
          ((eq? op 'mix)
             (2color-exp '+
                         (1color-exp '* left 0.5)
                         (1color-exp '* right 0.5)))
          (else
             (error preprocess-2color "illegal args ~a ~a" op left right)))))

(define preprocess-1color
  (lambda (op color number)
    (1color-exp op color number)))

(define preprocess-color/in
  (lambda (var color1 color2)
    (color/in-exp var color1 color2)))


;; <color> ::= ( do <assignment>* <color> )
(define preprocess-do-assign ;;do w/ assignment
  (lambda (assignment color)
    (do-exp-assign assignment color)))

(define preprocess-do ;;do w/o assignment
  (lambda (color)
    (do-exp color)))

(define preprocess-assignment
  (lambda (assignment)
    (assgn-exp (assgn-varref assignment) (preprocess (assgn-color assignment) ))))
      

;; --------------------------------------------------------------------------
;; This function preprocesses and evaluates programs written in the full
;; Huey language.  If its argument is not a valid exp, it signals an error.
;; --------------------------------------------------------------------------

(define eval-exp
  (lambda (exp)
    (if (color? exp)
        (eval-core (preprocess exp) environment)
        (error 'huey "illegal expression -- ~a" exp))))

(define eval-core
  (lambda (exp env)
    (cond ((rgb? exp) exp)

          ((unary-exp? exp)
              (eval-unary (unary->op exp)
                          (eval-core (unary->arg exp) env)))

          ((2color-exp? exp)
              (eval-2color (2color->op exp)
                           (eval-core (2color->left exp) env)
                           (eval-core (2color->right exp) env)))

          ((1color-exp? exp)
              (eval-1color (1color->op exp)
                           (eval-core (1color->left exp) env)
                           (1color->right exp)))

          [(color/in? exp)
               (eval-color/in (color/in-var exp)
                              (color/in-color1 exp)
                              (color/in-color2 exp)
                              env)]

          [(do? exp)
           (if (> (length exp) 3)
               (do-exp-assign (map eval-do-assignment (do-assgn exp)) (eval-do (do-color exp)))
               (do-exp (eval-do (do-color exp))))]

          [(varref? exp)
              (eval-varref exp env)]
          (else
             (error 'eval-core "unreachable ~a" exp)))))

; these helper functions receive *evaluated* arguments

(define eval-unary
  (lambda (op color)
    (cond ((eq? op 'invert)
              (rgb (- 255 (r color))
                   (- 255 (g color))
                   (- 255 (b color))))
          (else
             (error 'eval-unary "unreachable -- bad op ~a" op)))))

(define eval-2color
  (lambda (op left right)
    (cond ((eq? op '+)
              (rgb (+ (r left) (r right))
                   (+ (g left) (g right))
                   (+ (b left) (b right))))
          ((eq? op '-)
              (rgb (- (r left) (r right))
                   (- (g left) (g right))
                   (- (b left) (b right))))
          (else
             (error 'eval-2color "unreachable -- bad op ~a" op)))))

(define eval-1color
  (lambda (op color number)
    (cond ((eq? op '*)
              (rgb (* (r color) number)
                   (* (g color) number)
                   (* (b color) number)))
          ((eq? op 'shift)
              (rgb (+ (r color) number)
                   (+ (g color) number)
                   (+ (b color) number)))
          (else
             (error 'eval-2color "unreachable -- bad op ~a" op)))))

(define eval-varref
  (lambda (exp env)
    (look-up exp env)))

(define eval-color/in
  (lambda (var color1 color2 env)
     (eval-core color2 (bind var (cell (eval-core color1 env))  env))))

(define eval-do
 (lambda (assignment color)
   #f)) ;;come back to later!!!

(define eval-do-assignment
  (lambda (assignment)
    (assgn-exp (assgn-varref assignment) (eval-core (assgn-color assignment) (bind (assgn-varref assignment) (eval-core assgn-varref
                                                                              ))))))


;; --------------------------------------------------------------------------

(define environment
  '((white rgb 255 255 255) (black rgb 0 0 0)))


(define run-huey
  (lambda ()
    (display "-->")
    (let ((input (read)))
      (cond
        [(color? input) (write-helper (eval-exp input))]
        [else "Try Again!"])
      (newline)
      (run-huey))))

(define write-helper
  (lambda (exp)
    (cond
      [(rgb? exp)
       (and
       (display "R: ")   (write   (r exp))
       (display "  G: ") (write   (g exp))
       (display "  B: ") (write   (b exp)) )]

      [else (write exp)])))



