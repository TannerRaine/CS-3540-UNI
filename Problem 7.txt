Welcome to DrRacket, version 8.11.1 [cs].
Language: racket, with debugging; memory limit: 128 MB.
> (define x '((a b)))
> (first (rest x))
. . first: contract violation
  expected: (and/c list? (not/c empty?))
  given: '()
> (define x '(x(a b)))
> (first (rest x))
'(a b)
> (define x '(a b(x)))
> (rest(first x ))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (rest (first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '((c (d e))))
> (rest x)
'()
> (first x)
'(c (d e))
> (define x '(((c (d e)))))
> (first x)
'((c (d e)))
> (rest(first x))
'()
> (define x '((c (d e))))
> (rest(first x))
'((d e))
> (define x '(c (d e)))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'c
> (rest x)
'((d e))
> (define x '(a(c (d e))))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '(a c (d e)))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '(a c (d e)))
> (rest x)
'(c (d e))
> (define x '(c (d e) a))
> (rest x)
'((d e) a)
> (first x)
'c
> (define x '((c (d e)) a))
> (first x)
'(c (d e))
> (define x '((c (d e))))
> (first x)
'(c (d e))
> (define x '((()c (d e))))
> (first x)
'(() c (d e))
> (rest(first x))
'(c (d e))
> 