Welcome to DrRacket, version 8.11.1 [cs].
Language: racket, with debugging; memory limit: 128 MB.
> (+ 14(- 39 27))
26
> 1
1
> 2
2
> 3
3
> 4
4
> test
. . test: undefined;
 cannot reference an identifier before its definition
> 'test
'test
> 'coolio
'coolio
> (- 73(*( (- -7 11) 3) ) )
. . application: not a procedure;
 expected a procedure that can be applied to arguments
  given: -18
> (- 73(* (- -7 11) 3))
127
> (* 30(/ 24/30 7))
3 3/7
> (+ (- (* 10 98) (* 7 6)) (* 543 2 1))
2024
> ; Happy New Year Eugene!
f
. . f: undefined;
 cannot reference an identifier before its definition
> End of 1
. . End: undefined;
 cannot reference an identifier before its definition
> (* 4 7(+ -11 6))
-140
> 'I was wrong sorry
'I
. . was: undefined;
 cannot reference an identifier before its definition
> (- (* 4 7) (- 6 11))
33
> 'Im-still-wrong
'Im-still-wrong
> (- (* 4 7) (+ 11 6))
11
> 'thats-right
'thats-right
> (* 4(+ 6(- 7 11)))
8
> (+ 6(* 4(- 7 11)))
-10
> (- -1.7(+ 1.6(* 1/3 6)))
-5.3
> (- (+ 1.6(* 1/3 6))-1.7)
5.3
> (+ 1.6 (* 1/3 (- 6 -1.7)))
4.166666666666666
> > (+ 24)
24
> (+ 24 x)
. . x: undefined;
 cannot reference an identifier before its definition
> (+ -1
     (sqrt
      (- (expt 1 2)
         (* 4(* 3 -24)))))
16
> (/(+ -1
     (sqrt
      (- (expt 1 2)
         (* 4(* 3 -24)))))6)
2 2/3
> (/(+ -1
     (sqrt
      (- (expt 1 2)
         (* 4(* 3 -24)))))(* 2 3))
2 2/3
> (define big-number 1059430001)
> (define small-number 0.002000015)
> (define msu 'spartans)
> (define number1 big-number)
> (define number2 'big-number)
> (define symbol1 msu)
> (define symbol2 msu)
> symbol2
'spartans
> symbol1
'spartans
> big-number
1059430001
> small-numbers
. . small-numbers: undefined;
 cannot reference an identifier before its definition
> small-number
0.002000015
> msu
'spartans
> number1
1059430001
> number2
'big-number
> big-number
1059430001
> small-number
0.002000015
> 'big-number
'big-number
> msu
'spartans
> 'msu
'msu
> number1
1059430001
> number2
'big-number
> 'number1
'number1
> symbol1
'spartans
> symbol2
'spartans
> 'symbol2
'symbol2
> (first '(a b c d))
'a
> (first '(a (b c)d))
'a
> (rest(first '(a (b c)d)))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (first(first '(a (b c)d)))
. . first: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define test '(a (b d) d))
> test
'(a (b d) d)
> (first test)
'a
> (first rest test)
. . first: arity mismatch;
 the expected number of arguments does not match the given number
  expected: 1
  given: 2
> (rest(rest test))
'(d)
> (rest(rest(rest test)))
'()
> (rest(rest(rest(rest test))))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: '()
> test
'(a (b d) d)
> (define test '(a (b c) d))
> test
'(a (b c) d)
> (first test)
'a
> (rest(rest test))
'(d)
> cls
. . cls: undefined;
 cannot reference an identifier before its definition
> ;nevermind :f
(first test)
'a
> (rest test)
'((b c) d)
> (first(rest test))
'(b c)
> (first(first(rest test)))
'b
> (rest(first(rest test)))
'(c)
> (rest(rest test))
'(d)
> (first test)
'a
> (first(first(rest test)))
'b
> (rest(first(rest test)))
'(c)
> (rest(rest test))
'(d)
> (first(rest(rest test)))
'd
> (first test)
'a
> (first(first(rest test)))
'b
> (first(rest(first(rest test))))
'c
> (first(rest(rest test)))
'd
> (define test '(5 4 (x) 2 1))
> test
'(5 4 (x) 2 1)
> ;cool
;glad-that-worked-or-else
(rest test)
'(4 (x) 2 1)
> (first(rest(rest test)))
'(x)
> (rest(rest test))
'((x) 2 1)
> ;thats-weird
(rest(first(rest(rest test))))
'()
> ;thats-weird
(first(first(rest(rest test))))
'x
> (define test2 '(1 (2 (3) 4 5) (6 x 8)))
> test2
'(1 (2 (3) 4 5) (6 x 8))
> ;first then 3 rest
(first(rest(rest(rest test2))))
. . first: contract violation
  expected: (and/c list? (not/c empty?))
  given: '()
> (rest(rest(rest test2)))
'()
> (rest(rest test2))
'((6 x 8))
> (first(rest(rest test2)))
'(6 x 8)
> (first(first(rest(rest test2))))
6
> (first(rest(first(rest(rest test2)))))
'x
> ;LETS GO
(define test3 '(((1 ((2)) ((x (3)) 5)))))

> test3
'(((1 ((2)) ((x (3)) 5))))
> (rest(test3))
. . application: not a procedure;
 expected a procedure that can be applied to arguments
  given: '(((1 ((2)) ((x (3)) 5))))
> (rest test3)
'()
> (first test3)
'((1 ((2)) ((x (3)) 5)))
> (first(first(first test3)))
1
> (first(first test3))
'(1 ((2)) ((x (3)) 5))
> (rest(first(first test3)))
'(((2)) ((x (3)) 5))
> (first(rest(first(first test3))))
'((2))
> (rest(rest(first(first test3))))
'(((x (3)) 5))
> (first(first(rest(rest(first(first test3))))))
'(x (3))
> (first(first(first(rest(rest(first(first test3)))))))
'x
> (define x '((a b)))
> (first (rest x))
. . first: contract violation
  expected: (and/c list? (not/c empty?))
  given: '()
> (define x '(x(a b)))
> (first (rest x))
'(a b)
> (define x '(a b(x)))
> (rest(first x ))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (rest (first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '((c (d e))))
> (rest x)
'()
> (first x)
'(c (d e))
> (define x '(((c (d e)))))
> (first x)
'((c (d e)))
> (rest(first x))
'()
> (define x '((c (d e))))
> (rest(first x))
'((d e))
> (define x '(c (d e)))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'c
> (rest x)
'((d e))
> (define x '(a(c (d e))))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '(a c (d e)))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '(a c (d e)))
> (rest x)
'(c (d e))
> (define x '(c (d e) a))
> (rest x)
'((d e) a)
> (first x)
'c
> (define x '((c (d e)) a))
> (first x)
'(c (d e))
> (define x '((c (d e))))
> (first x)
'(c (d e))
> (define x '((()c (d e))))
> (first x)
'(() c (d e))
> (rest(first x))
'(c (d e))
> (define x '((a b)))
> (first (rest x))
. . first: contract violation
  expected: (and/c list? (not/c empty?))
  given: '()
> (define x '(x(a b)))
> (first (rest x))
'(a b)
> (define x '(a b(x)))
> (rest(first x ))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (rest (first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '((c (d e))))
> (rest x)
'()
> (first x)
'(c (d e))
> (define x '(((c (d e)))))
> (first x)
'((c (d e)))
> (rest(first x))
'()
> (define x '((c (d e))))
> (rest(first x))
'((d e))
> (define x '(c (d e)))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'c
> (rest x)
'((d e))
> (define x '(a(c (d e))))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '(a c (d e)))
> (rest(first x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: 'a
> (define x '(a c (d e)))
> (rest x)
'(c (d e))
> (define x '(c (d e) a))
> (rest x)
'((d e) a)
> (first x)
'c
> (define x '((c (d e)) a))
> (first x)
'(c (d e))
> (define x '((c (d e))))
> (first x)
'(c (d e))
> (define x '((()c (d e))))
> (first x)
'(() c (d e))
> (rest(first x))
'(c (d e))
> (define x '((((f g) h))))
> (rest (rest x))
. . rest: contract violation
  expected: (and/c list? (not/c empty?))
  given: '()
> (rest x)
'()
> (define x '(()((f g) h)))
> (rest x)
'(((f g) h))
> (define x '(()(()((f g) h))))
> (rest(rest x))
'()
> (first(rest x))
'(() ((f g) h))
> (define x '(()(((f g) h))))
> (rest x)
'((((f g) h)))
> (define x '(()(()(f g) h)))
> (rest (rest x))
'()
> (rest x)
'((() (f g) h))
> (define x '(()((f g) h)))
> (rest x)
'(((f g) h))
> (rest (rest x))
'()
> (first (rest x))
'((f g) h)
> (define x '(()()(f g) h))
> (rest x)
'(() (f g) h)
> (rest(rest x))
'((f g) h)
> (length '(5 4 (x) 2 1))
5
> (length '(1 (2 (3) 4 5) (6 x 8)))
3
> (length '(1 (2 (3) 4 5) (6 x 8)))
3
> (length '(((1 ((2)) ((x (3)) 5)))))
1